@startuml
!include style.puml

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":AddressBookParser" as AddressBookParser LOGIC_COLOR
participant ":DeleteCommandParser" as DeleteCommandParser LOGIC_COLOR
participant ":ParserUtil" as ParserUtil LOGIC_COLOR
participant "d:DeleteCommand" as DeleteCommand LOGIC_COLOR
participant ":CommandResult" as CommandResult LOGIC_COLOR
participant ":CommandException" as CommandException LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant "model:Model" as Model MODEL_COLOR
end box

[-> LogicManager : execute("delete 1 2")
activate LogicManager

LogicManager -> AddressBookParser : parseCommand("delete 1 2")
activate AddressBookParser

create DeleteCommandParser
AddressBookParser -> DeleteCommandParser
activate DeleteCommandParser

DeleteCommandParser --> AddressBookParser
deactivate DeleteCommandParser

AddressBookParser -> DeleteCommandParser : parse("1 2")
activate DeleteCommandParser

DeleteCommandParser -> ParserUtil : parseDeleteIndex("1 2")
activate ParserUtil

loop number of tokens split by whitespace
    ParserUtil -> ParserUtil : parseIndex(token)
end

return indexes
deactivate ParserUtil

create DeleteCommand
DeleteCommandParser -> DeleteCommand : indexes
activate DeleteCommand

DeleteCommand --> DeleteCommandParser
deactivate DeleteCommand

DeleteCommandParser --> AddressBookParser
deactivate DeleteCommandParser
'Hidden arrow to position the destroy marker below the end of the activation bar.
DeleteCommandParser -[hidden]-> AddressBookParser
destroy DeleteCommandParser

AddressBookParser --> LogicManager
deactivate AddressBookParser

LogicManager -> DeleteCommand : execute(model)
activate DeleteCommand

DeleteCommand -> Model : getFilteredPassengerList()
activate Model

Model --> DeleteCommand : lastShownList
deactivate Model

loop number of passengers in lastShownList
    DeleteCommand -> Model : hasPoolWithPassenger(passenger)
    activate Model

    Model --> DeleteCommand
    deactivate Model
end

break pools containing passenger found
    create CommandException
    DeleteCommand -> CommandException
end

loop number of passengers in lastShownList
    DeleteCommand -> Model : deletePassenger(passenger)
    activate Model
    deactivate Model
end

create CommandResult
DeleteCommand -> CommandResult : targetedPassengers

CommandResult --> DeleteCommand

DeleteCommand --> LogicManager
deactivate DeleteCommand

'Hidden arrow to position the destroy marker below the end of the activation bar.
DeleteCommand -[hidden]-> LogicManager
destroy DeleteCommand

[<--LogicManager
deactivate LogicManager
@enduml
