@startuml BudgetBabyLogicClassDiagram
!include style.puml
skinparam arrowThickness 1.1
skinparam arrowColor LOGIC_COLOR_T4
skinparam classBackgroundColor LOGIC_COLOR

package Logic {

package Parser {
Interface BudgetBabyCommandParser <<Interface>>
Class BudgetBabyParser
Class XYZCommandParser
Class CliSyntax
Class ParserUtil
Class ArgumentMultimap
Class ArgumentTokenizer
Class Prefix
Class YearMonthParser
}

package Command {
Class XYZCommand
Class CommandResult
Class "{abstract}\nBudgetBabyCommand" as BudgetBabyCommand
}

Interface BudgetBabyLogic <<Interface>>
Class BudgetBabyLogicManager
}

package Model{
Class HiddenModel #FFFFFF
}

Class HiddenOutside #FFFFFF
HiddenOutside ..> BudgetBabyLogic

BudgetBabyLogicManager .up.|> BudgetBabyLogic
BudgetBabyLogicManager -->"1" BudgetBabyParser
BudgetBabyParser .left.> XYZCommandParser: creates >

XYZCommandParser ..> XYZCommand : creates >
XYZCommandParser ..|> BudgetBabyCommandParser
XYZCommandParser ..> ArgumentMultimap
XYZCommandParser ..> ArgumentTokenizer
ArgumentTokenizer .left.> ArgumentMultimap
XYZCommandParser ..> CliSyntax
CliSyntax ..> Prefix
XYZCommandParser ..> ParserUtil
ParserUtil .down.> Prefix
ParserUtil ..> YearMonthParser
ArgumentTokenizer .down.> Prefix
XYZCommand -up-|> BudgetBabyCommand
BudgetBabyLogicManager .left.> BudgetBabyCommand : executes >

BudgetBabyLogicManager --> Model
BudgetBabyCommand .right.> Model
note right of XYZCommand: XYZCommand = AddFrCommand, \nDeleteFrCommand, etc

BudgetBabyLogic ..> CommandResult
BudgetBabyLogicManager .down.> CommandResult
BudgetBabyCommand .up.> CommandResult
CommandResult -[hidden]-> BudgetBabyCommandParser
@enduml
