import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'java'
    id 'checkstyle'
    id 'com.github.johnrengelman.shadow' version '4.0.4'
    id 'application'
    id 'jacoco'
}

mainClassName = 'seedu.address.Main'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
}

checkstyle {
    toolVersion = '8.29'
}

dependencies {
    String jUnitVersion = '5.4.0'
    String javaFxVersion = '11'
    String testFxVersion = '4.0.16-alpha'

    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'linux'

    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.7.0'
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.7.4'

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: jUnitVersion
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: jUnitVersion

    testImplementation group: 'org.testfx', name: 'testfx-core', version: testFxVersion
    testImplementation group: 'org.testfx', name: 'testfx-junit5', version: testFxVersion
    testRuntimeOnly group: 'org.testfx', name: 'openjfx-monocle', version: 'jdk-11+26'
}

shadowJar {
    archiveFileName = 'CoLAB.jar'
}

// Run `test` task if `guiTests` or `nonGuiTests` is specified
task(guiTests)
guiTests {
    dependsOn test
}

test {
    useJUnitPlatform()

    systemProperty 'testfx.setup.timeout', '60000'

    doFirst {
        boolean runGuiTests = gradle.taskGraph.hasTask(guiTests)

        if (!runGuiTests) {
            exclude 'seedu/address/ui/**'
        }
    }

    testLogging {
        events TestLogEvent.FAILED, TestLogEvent.SKIPPED

        // Prints the currently running test's name in the CI's build log,
        // so that we can check if tests are being silently skipped or
        // stalling the build.
        if (System.env.'CI') {
            events << TestLogEvent.STARTED
        }
    }

    finalizedBy jacocoTestReport
}

task headless {
    doFirst {
        println 'Setting headless mode properties.'
        test {
            systemProperties = [
                    'java.awt.headless': 'true',
                    'testfx.robot': 'glass',
                    'testfx.headless': 'true',
                    'prism.order': 'sw',
                    'prism.text': 't2k',
            ]
        }
    }
}

// Makes sure that headless properties are set before running tests
test.mustRunAfter headless

task coverage(type: JacocoReport) {
    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)
    classDirectories.from files(sourceSets.main.output)
    executionData.from files(jacocoTestReport.executionData)
    afterEvaluate {
        classDirectories.from files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/*.jar'])
        })
    }
    reports {
        html.enabled = true
        xml.enabled = true
    }
}

run {
    enableAssertions = true
}

defaultTasks 'clean', 'headless', 'test'
